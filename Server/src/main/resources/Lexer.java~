// DO NOT EDIT
// Generated by JFlex 1.9.0 http://jflex.de/
// source: LexicoServer.jflex

/*Java Code Specification*/
package com.mycompany.server.parser;
import static com.mycompany.server.parser.ParserSym.*;
import java_cup.runtime.Symbol;

@SuppressWarnings("fallthrough")
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u0100"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00\1\u4f00\1\u5000"+
    "\1\u5100\3\u0100\1\u5200\1\u5300\1\u5400\12\u1f00\4\u0100\1\u5500"+
    "\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100\1\u5700\1\u5800\2\u1f00"+
    "\1\u5900\1\u5a00\27\u0100\1\u5b00\4\u0100\1\u5c00\1\u5d00\42\u1f00"+
    "\1\u0100\1\u5e00\1\u5f00\11\u1f00\1\u6000\24\u1f00\1\u6100\1\u6200"+
    "\1\u1f00\1\u6300\1\u6400\1\u6500\1\u6600\2\u1f00\1\u6700\5\u1f00"+
    "\1\u6800\1\u6900\1\u6a00\5\u1f00\1\u6b00\1\u6c00\2\u1f00\1\u6d00"+
    "\1\u1f00\1\u6e00\14\u1f00\1\u6f00\4\u1f00\246\u0100\1\u7000\20\u0100"+
    "\1\u7100\1\u7200\25\u0100\1\u7300\34\u0100\1\u7400\14\u1f00\2\u0100"+
    "\1\u7500\5\u1f00\23\u0100\1\u7600\u0aec\u1f00\1\u7700\1\u7800\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\3"+
    "\1\1\1\3\1\5\1\3\1\6\3\3\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\11\20"+
    "\1\21\1\22\5\3\1\23\1\24\1\25\1\6\1\26"+
    "\1\27\1\6\1\30\1\31\1\6\1\32\1\33\2\6"+
    "\1\34\2\6\1\35\5\6\1\36\1\37\1\6\1\40"+
    "\1\3\1\41\1\3\1\42\1\3\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\6\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\6\1\62\1\63"+
    "\1\64\1\65\1\6\1\66\1\67\1\70\1\6\1\71"+
    "\1\3\1\72\1\3\41\0\2\3\4\6\4\3\1\6"+
    "\2\3\1\0\7\3\1\6\4\3\1\6\5\3\27\6"+
    "\1\3\37\6\1\3\u01ca\6\4\3\14\6\16\3\5\6"+
    "\7\3\1\6\1\3\1\6\21\3\160\0\5\6\1\3"+
    "\2\6\2\3\4\6\1\3\1\6\6\3\1\6\1\3"+
    "\3\6\1\3\1\6\1\3\24\6\1\3\123\6\1\3"+
    "\213\6\1\3\5\0\2\3\246\6\1\3\46\6\2\3"+
    "\1\6\6\3\51\6\6\3\1\6\1\3\55\0\1\3"+
    "\1\0\1\3\2\0\1\3\2\0\1\3\1\0\10\3"+
    "\33\6\4\3\4\6\15\3\6\0\5\3\1\6\4\3"+
    "\13\0\1\3\1\0\3\3\53\6\25\0\12\73\4\3"+
    "\2\6\1\0\143\6\1\3\1\6\10\0\1\3\6\0"+
    "\2\6\2\0\1\3\4\0\2\6\12\73\3\6\2\3"+
    "\1\6\17\3\1\0\1\6\1\0\36\6\33\0\2\3"+
    "\131\6\13\0\1\6\16\3\12\73\41\6\11\0\2\6"+
    "\4\3\1\6\2\3\1\0\30\6\4\0\1\6\11\0"+
    "\1\6\3\0\1\6\5\0\22\3\31\6\3\0\4\3"+
    "\13\6\65\3\25\6\1\3\22\6\13\3\61\0\66\6"+
    "\3\0\1\6\22\0\1\6\7\0\12\6\2\0\2\3"+
    "\12\73\1\3\20\6\3\0\1\3\10\6\2\3\2\6"+
    "\2\3\26\6\1\3\7\6\1\3\1\6\3\3\4\6"+
    "\2\3\1\0\1\6\7\0\2\3\2\0\2\3\3\0"+
    "\1\6\10\3\1\0\4\3\2\6\1\3\3\6\2\0"+
    "\2\3\12\73\4\6\7\3\2\6\1\3\1\0\2\3"+
    "\3\0\1\3\6\6\4\3\2\6\2\3\26\6\1\3"+
    "\7\6\1\3\2\6\1\3\2\6\1\3\2\6\2\3"+
    "\1\0\1\3\5\0\4\3\2\0\2\3\3\0\3\3"+
    "\1\0\7\3\4\6\1\3\1\6\7\3\12\73\2\0"+
    "\3\6\1\0\13\3\3\0\1\3\11\6\1\3\3\6"+
    "\1\3\26\6\1\3\7\6\1\3\2\6\1\3\5\6"+
    "\2\3\1\0\1\6\10\0\1\3\3\0\1\3\3\0"+
    "\2\3\1\6\17\3\2\6\2\0\2\3\12\73\1\3"+
    "\1\6\7\3\1\6\6\0\1\3\3\0\1\3\10\6"+
    "\2\3\2\6\2\3\26\6\1\3\7\6\1\3\2\6"+
    "\1\3\5\6\2\3\1\0\1\6\7\0\2\3\2\0"+
    "\2\3\3\0\7\3\3\0\4\3\2\6\1\3\3\6"+
    "\2\0\2\3\12\73\1\3\1\6\20\3\1\0\1\6"+
    "\1\3\6\6\3\3\3\6\1\3\4\6\3\3\2\6"+
    "\1\3\1\6\1\3\2\6\3\3\2\6\3\3\3\6"+
    "\3\3\14\6\4\3\5\0\3\3\3\0\1\3\4\0"+
    "\2\3\1\6\6\3\1\0\16\3\12\73\11\3\1\6"+
    "\6\3\5\0\10\6\1\3\3\6\1\3\27\6\1\3"+
    "\20\6\3\3\1\6\7\0\1\3\3\0\1\3\4\0"+
    "\7\3\2\0\1\3\3\6\5\3\2\6\2\0\2\3"+
    "\12\73\20\3\1\6\3\0\1\3\10\6\1\3\3\6"+
    "\1\3\27\6\1\3\12\6\1\3\5\6\2\3\1\0"+
    "\1\6\7\0\1\3\3\0\1\3\4\0\7\3\2\0"+
    "\7\3\1\6\1\3\2\6\2\0\2\3\12\73\1\3"+
    "\2\6\15\3\4\0\11\6\1\3\3\6\1\3\51\6"+
    "\2\0\1\6\7\0\1\3\3\0\1\3\4\0\1\6"+
    "\5\3\3\6\1\0\7\3\3\6\2\0\2\3\12\73"+
    "\12\3\6\6\1\3\3\0\1\3\22\6\3\3\30\6"+
    "\1\3\11\6\1\3\1\6\2\3\7\6\3\3\1\0"+
    "\4\3\6\0\1\3\1\0\1\3\10\0\6\3\12\73"+
    "\2\3\2\0\15\3\60\6\1\0\2\6\7\0\4\3"+
    "\10\6\10\0\1\3\12\73\47\3\2\6\1\3\1\6"+
    "\1\3\5\6\1\3\30\6\1\3\1\6\1\3\12\6"+
    "\1\0\2\6\11\0\1\6\2\3\5\6\1\3\1\6"+
    "\1\3\6\0\2\3\12\73\2\3\4\6\40\3\1\6"+
    "\27\3\2\0\6\3\12\73\13\3\1\0\1\3\1\0"+
    "\1\3\1\0\4\3\2\0\10\6\1\3\44\6\4\3"+
    "\24\0\1\3\2\0\5\6\13\0\1\3\44\0\11\3"+
    "\1\0\71\3\53\6\24\0\1\6\12\73\6\3\6\6"+
    "\4\0\4\6\3\0\1\6\3\0\2\6\7\0\3\6"+
    "\4\0\15\6\14\0\1\6\1\0\12\73\4\0\2\3"+
    "\46\6\1\3\1\6\5\3\1\6\2\3\53\6\1\3"+
    "\115\6\1\3\4\6\2\3\7\6\1\3\1\6\1\3"+
    "\4\6\2\3\51\6\1\3\4\6\2\3\41\6\1\3"+
    "\4\6\2\3\7\6\1\3\1\6\1\3\4\6\2\3"+
    "\17\6\1\3\71\6\1\3\4\6\2\3\103\6\2\3"+
    "\3\0\40\3\20\6\20\3\126\6\2\3\6\6\3\3"+
    "\u016c\6\2\3\21\6\1\3\32\6\5\3\113\6\3\3"+
    "\13\6\7\3\15\6\1\3\4\6\3\0\13\3\22\6"+
    "\3\0\13\3\22\6\2\0\14\3\15\6\1\3\3\6"+
    "\1\3\2\0\14\3\64\6\40\0\3\3\1\6\3\3"+
    "\2\6\1\0\2\3\12\73\41\3\4\0\1\3\12\73"+
    "\6\3\131\6\7\3\5\6\2\0\42\6\1\0\1\6"+
    "\5\3\106\6\12\3\37\6\1\3\14\0\4\3\14\0"+
    "\12\3\12\73\36\6\2\3\5\6\13\3\54\6\4\3"+
    "\32\6\6\3\12\73\46\3\27\6\5\0\4\3\65\6"+
    "\12\0\1\3\35\0\2\3\1\0\12\73\6\3\12\73"+
    "\15\3\1\6\10\3\16\0\1\3\2\0\77\3\5\0"+
    "\57\6\21\0\7\6\4\3\12\73\21\3\11\0\14\3"+
    "\3\0\36\6\15\0\2\6\12\73\54\6\16\0\14\3"+
    "\44\6\24\0\10\3\12\73\3\3\3\6\12\73\44\6"+
    "\2\3\11\6\7\3\53\6\2\3\3\6\20\3\3\0"+
    "\1\3\25\0\4\6\1\0\6\6\1\0\2\6\3\0"+
    "\1\6\5\3\300\6\72\0\1\3\5\0\26\6\2\3"+
    "\6\6\2\3\46\6\2\3\6\6\2\3\10\6\1\3"+
    "\1\6\1\3\1\6\1\3\1\6\1\3\37\6\2\3"+
    "\65\6\1\3\7\6\1\3\1\6\3\3\3\6\1\3"+
    "\7\6\3\3\4\6\2\3\6\6\4\3\15\6\5\3"+
    "\3\6\1\3\7\6\16\3\5\0\32\3\5\0\20\3"+
    "\2\6\23\3\1\6\13\3\5\0\1\3\12\0\1\3"+
    "\1\6\15\3\1\6\20\3\15\6\3\3\40\6\20\3"+
    "\15\0\4\3\1\0\3\3\14\0\21\3\1\6\4\3"+
    "\1\6\2\3\12\6\1\3\1\6\3\3\5\6\6\3"+
    "\1\6\1\3\1\6\1\3\1\6\1\3\4\6\1\3"+
    "\13\6\2\3\4\6\5\3\5\6\4\3\1\6\21\3"+
    "\51\6\u0177\3\57\6\1\3\57\6\1\3\205\6\6\3"+
    "\4\6\3\0\2\6\14\3\46\6\1\3\1\6\5\3"+
    "\1\6\2\3\70\6\7\3\1\6\17\3\1\0\27\6"+
    "\11\3\7\6\1\3\7\6\1\3\7\6\1\3\7\6"+
    "\1\3\7\6\1\3\7\6\1\3\7\6\1\3\7\6"+
    "\1\3\40\0\57\3\1\6\325\3\3\6\31\3\11\6"+
    "\6\0\1\3\5\6\2\3\5\6\4\3\126\6\2\3"+
    "\2\0\2\3\3\6\1\3\132\6\1\3\4\6\5\3"+
    "\53\6\1\3\136\6\21\3\40\6\60\3\320\6\100\3"+
    "\375\6\3\3\215\6\103\3\56\6\2\3\15\6\3\3"+
    "\20\6\12\73\2\6\24\3\57\6\1\0\4\3\12\0"+
    "\1\3\37\6\2\0\120\6\2\0\45\3\11\6\2\3"+
    "\147\6\2\3\65\6\2\3\11\6\52\3\15\6\1\0"+
    "\3\6\1\0\4\6\1\0\27\6\5\0\4\3\1\0"+
    "\13\3\1\6\7\3\64\6\14\3\2\0\62\6\22\0"+
    "\12\3\12\73\6\3\22\0\6\6\3\3\1\6\1\3"+
    "\2\6\1\0\12\73\34\6\10\0\2\3\27\6\15\0"+
    "\14\3\35\6\3\3\4\0\57\6\16\0\16\3\1\6"+
    "\12\73\6\3\5\6\1\0\12\6\12\73\5\6\1\3"+
    "\51\6\16\0\11\3\3\6\1\0\10\6\2\0\2\3"+
    "\12\73\6\3\27\6\3\3\1\6\3\0\62\6\1\0"+
    "\1\6\3\0\2\6\2\0\5\6\2\0\1\6\1\0"+
    "\1\6\30\3\3\6\2\3\13\6\5\0\2\3\3\6"+
    "\2\0\12\3\6\6\2\3\6\6\2\3\6\6\11\3"+
    "\7\6\1\3\7\6\1\3\53\6\1\3\16\6\6\3"+
    "\163\6\10\0\1\3\2\0\2\3\12\73\6\3\244\6"+
    "\14\3\27\6\4\3\61\6\4\3\156\6\2\3\152\6"+
    "\46\3\7\6\14\3\5\6\5\3\1\6\1\0\12\6"+
    "\1\3\15\6\1\3\5\6\1\3\1\6\1\3\2\6"+
    "\1\3\2\6\1\3\154\6\41\3\153\6\22\3\100\6"+
    "\2\3\66\6\50\3\15\6\3\3\20\0\20\3\20\0"+
    "\3\3\2\6\30\3\3\6\31\3\1\6\6\3\5\6"+
    "\1\3\207\6\2\3\1\0\4\3\1\6\13\3\12\73"+
    "\7\3\32\6\4\3\1\6\1\3\32\6\13\3\131\6"+
    "\3\3\6\6\2\3\6\6\2\3\6\6\2\3\3\6"+
    "\3\3\2\6\3\3\2\6\22\3\3\0\4\3\14\6"+
    "\1\3\32\6\1\3\23\6\1\3\2\6\1\3\17\6"+
    "\2\3\16\6\42\3\173\6\105\3\65\6\210\3\1\0"+
    "\202\3\35\6\3\3\61\6\17\3\1\0\37\3\40\6"+
    "\15\3\36\6\5\3\46\6\5\0\5\3\36\6\2\3"+
    "\44\6\4\3\10\6\1\3\5\6\52\3\236\6\2\3"+
    "\12\73\6\3\44\6\4\3\44\6\4\3\50\6\10\3"+
    "\64\6\234\3\67\6\11\3\26\6\12\3\10\6\230\3"+
    "\6\6\2\3\1\6\1\3\54\6\1\3\2\6\3\3"+
    "\1\6\2\3\27\6\12\3\27\6\11\3\37\6\101\3"+
    "\23\6\1\3\2\6\12\3\26\6\12\3\32\6\106\3"+
    "\70\6\6\3\2\6\100\3\1\6\3\0\1\3\2\0"+
    "\5\3\4\0\4\6\1\3\3\6\1\3\35\6\2\3"+
    "\3\0\4\3\1\0\40\3\35\6\3\3\35\6\43\3"+
    "\10\6\1\3\34\6\2\0\31\3\66\6\12\3\26\6"+
    "\12\3\23\6\15\3\22\6\156\3\111\6\67\3\63\6"+
    "\15\3\63\6\15\3\44\6\4\0\10\3\12\73\u0146\3"+
    "\52\6\1\3\2\0\3\3\2\6\116\3\35\6\12\3"+
    "\1\6\10\3\26\6\13\0\137\3\25\6\33\3\27\6"+
    "\11\3\3\0\65\6\17\0\37\3\12\73\17\3\4\0"+
    "\55\6\13\0\2\3\1\0\17\3\1\0\2\3\31\6"+
    "\7\3\12\73\6\3\3\0\44\6\16\0\1\3\12\73"+
    "\4\3\1\6\2\0\1\6\10\3\43\6\1\0\2\3"+
    "\1\6\11\3\3\0\60\6\16\0\4\6\4\3\4\0"+
    "\1\3\2\0\12\73\1\6\1\3\1\6\43\3\22\6"+
    "\1\3\31\6\14\0\6\3\1\0\101\3\7\6\1\3"+
    "\1\6\1\3\4\6\1\3\17\6\1\3\12\6\7\3"+
    "\57\6\14\0\5\3\12\73\6\3\4\0\1\3\10\6"+
    "\2\3\2\6\2\3\26\6\1\3\7\6\1\3\2\6"+
    "\1\3\5\6\1\3\2\0\1\6\7\0\2\3\2\0"+
    "\2\3\3\0\2\3\1\6\6\3\1\0\5\3\5\6"+
    "\2\0\2\3\7\0\3\3\5\0\213\3\65\6\22\0"+
    "\4\6\5\3\12\73\4\3\1\0\3\6\36\3\60\6"+
    "\24\0\2\6\1\3\1\6\10\3\12\73\246\3\57\6"+
    "\7\0\2\3\11\0\27\3\4\6\2\0\42\3\60\6"+
    "\21\0\3\3\1\6\13\3\12\73\46\3\53\6\15\0"+
    "\1\6\7\3\12\73\66\3\33\6\2\3\17\0\4\3"+
    "\12\73\306\3\54\6\17\0\145\3\100\6\12\73\25\3"+
    "\10\6\2\3\1\6\2\3\10\6\1\3\2\6\1\3"+
    "\30\6\6\0\1\3\2\0\2\3\4\0\1\6\1\0"+
    "\1\6\2\0\14\3\12\0\106\3\10\6\2\3\47\6"+
    "\7\0\2\3\7\0\1\6\1\3\1\6\1\0\33\3"+
    "\1\6\12\0\50\6\7\0\1\6\4\0\10\3\1\0"+
    "\10\3\1\6\13\0\56\6\20\0\3\3\1\6\42\3"+
    "\71\6\7\3\11\6\1\3\45\6\10\0\1\3\10\0"+
    "\1\6\17\3\12\73\30\3\36\6\2\3\26\0\1\3"+
    "\16\0\111\3\7\6\1\3\2\6\1\3\46\6\6\0"+
    "\3\3\1\0\1\3\2\0\1\3\7\0\1\6\1\0"+
    "\10\3\12\73\6\3\6\6\1\3\2\6\1\3\40\6"+
    "\5\0\1\3\2\0\1\3\5\0\1\6\7\3\12\73"+
    "\u0136\3\23\6\4\0\271\3\1\6\54\3\4\6\37\3"+
    "\232\6\146\3\157\6\21\3\304\6\274\3\57\6\1\3"+
    "\11\0\307\3\107\6\271\3\71\6\7\3\37\6\1\3"+
    "\12\73\146\3\36\6\2\3\5\0\13\3\60\6\7\0"+
    "\11\3\4\6\14\3\12\73\11\3\25\6\5\3\23\6"+
    "\260\3\100\6\200\3\113\6\4\3\1\0\1\6\67\0"+
    "\7\3\4\0\15\6\100\3\2\6\1\3\1\6\1\0"+
    "\13\3\2\0\16\3\370\6\10\3\326\6\52\3\11\6"+
    "\367\3\37\6\61\3\3\6\21\3\4\6\10\3\u018c\6"+
    "\4\3\153\6\5\3\15\6\3\3\11\6\7\3\12\6"+
    "\3\3\2\0\1\3\4\0\301\3\5\0\3\3\26\0"+
    "\2\3\7\0\36\3\4\0\224\3\3\0\273\3\125\6"+
    "\1\3\107\6\1\3\2\6\2\3\1\6\2\3\2\6"+
    "\2\3\4\6\1\3\14\6\1\3\1\6\1\3\7\6"+
    "\1\3\101\6\1\3\4\6\2\3\10\6\1\3\7\6"+
    "\1\3\34\6\1\3\4\6\1\3\5\6\1\3\1\6"+
    "\3\3\7\6\1\3\u0154\6\2\3\31\6\1\3\31\6"+
    "\1\3\37\6\1\3\31\6\1\3\37\6\1\3\31\6"+
    "\1\3\37\6\1\3\31\6\1\3\37\6\1\3\31\6"+
    "\1\3\10\6\2\3\62\73\67\0\4\3\62\0\10\3"+
    "\1\0\16\3\1\0\26\3\5\0\1\3\17\0\120\3"+
    "\7\0\1\3\21\0\2\3\7\0\1\3\2\0\1\3"+
    "\5\0\325\3\55\6\3\3\7\0\7\6\2\3\12\73"+
    "\4\3\1\6\u0171\3\54\6\4\0\12\73\5\3\306\6"+
    "\13\3\7\0\51\3\104\6\7\0\1\6\4\3\12\73"+
    "\u0156\3\1\6\117\3\4\6\1\3\33\6\1\3\2\6"+
    "\1\3\1\6\2\3\1\6\1\3\12\6\1\3\4\6"+
    "\1\3\1\6\1\3\1\6\6\3\1\6\4\3\1\6"+
    "\1\3\1\6\1\3\1\6\1\3\3\6\1\3\2\6"+
    "\1\3\1\6\2\3\1\6\1\3\1\6\1\3\1\6"+
    "\1\3\1\6\1\3\1\6\1\3\2\6\1\3\1\6"+
    "\2\3\4\6\1\3\7\6\1\3\4\6\1\3\4\6"+
    "\1\3\1\6\1\3\12\6\1\3\21\6\5\3\3\6"+
    "\1\3\5\6\1\3\21\6\u0134\3\12\0\6\3\336\6"+
    "\42\3\65\6\13\3\336\6\2\3\u0182\6\16\3\u0131\6"+
    "\37\3\36\6\342\3\113\6\266\3\1\0\36\3\140\0"+
    "\200\3\360\0\20\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[30976];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\2\14\1\15\1\16\4\4"+
    "\1\17\1\20\11\4\1\21\1\22\2\0\1\14\20\4"+
    "\1\23\1\0\1\14\22\4\1\0\1\14\1\4\1\24"+
    "\1\4\1\25\5\4\1\26\2\4\1\27\1\4\1\30"+
    "\1\31\1\32\1\4\1\33\1\4\1\0\1\14\1\34"+
    "\1\35\1\4\1\36\2\4\1\37\6\4\3\40\3\4"+
    "\1\41\1\4\1\42\2\4\1\14\14\4\1\43\6\4"+
    "\1\44\10\4\1\45\1\46\6\4\1\47\3\4\1\50";

  private static int [] zzUnpackAction() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\74\0\170\0\74\0\264\0\74\0\74"+
    "\0\74\0\74\0\74\0\74\0\74\0\360\0\u012c\0\74"+
    "\0\74\0\u0168\0\u01a4\0\u01e0\0\u021c\0\74\0\74\0\u0258"+
    "\0\u0294\0\u02d0\0\u030c\0\u0348\0\u0384\0\u03c0\0\u03fc\0\u0438"+
    "\0\74\0\74\0\u0474\0\u04b0\0\u04ec\0\u0528\0\u0564\0\u05a0"+
    "\0\u05dc\0\u0618\0\u0654\0\u0690\0\u06cc\0\u0708\0\u0744\0\u0780"+
    "\0\u07bc\0\u07f8\0\u0834\0\u0870\0\u08ac\0\u0474\0\u08e8\0\u0924"+
    "\0\u0960\0\u099c\0\u09d8\0\u0a14\0\u0a50\0\u0a8c\0\u0ac8\0\u0b04"+
    "\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c\0\u0ca8\0\u0ce4"+
    "\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\264\0\u0e4c\0\264"+
    "\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\264\0\u0fb4\0\u0ff0"+
    "\0\264\0\u102c\0\264\0\264\0\264\0\u1068\0\264\0\u10a4"+
    "\0\u10e0\0\u111c\0\264\0\264\0\u1158\0\264\0\u1194\0\u11d0"+
    "\0\264\0\u120c\0\u1248\0\u1284\0\u12c0\0\u12fc\0\u1338\0\74"+
    "\0\u1374\0\264\0\u13b0\0\u13ec\0\u1428\0\264\0\u1464\0\u14a0"+
    "\0\u14dc\0\u1518\0\u1374\0\u1554\0\u1590\0\u15cc\0\u1608\0\u1644"+
    "\0\u1680\0\u16bc\0\u16f8\0\u1734\0\u1770\0\u17ac\0\u17e8\0\264"+
    "\0\u1824\0\u1860\0\u189c\0\u18d8\0\u1914\0\u1950\0\264\0\u198c"+
    "\0\u19c8\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8\0\u1af4\0\u1b30\0\264"+
    "\0\264\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20\0\u1c5c\0\u1c98\0\264"+
    "\0\u1cd4\0\u1d10\0\u1d4c\0\264";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\2\1\15\1\16\1\17"+
    "\1\20\1\21\1\6\1\22\1\23\1\6\1\24\1\25"+
    "\7\6\1\26\1\27\1\6\1\30\1\31\1\32\3\30"+
    "\1\6\1\33\4\6\1\34\1\6\1\35\1\36\1\6"+
    "\1\37\1\40\3\6\1\41\1\42\1\2\76\0\1\3"+
    "\71\0\1\6\5\0\1\6\10\0\2\6\2\0\15\6"+
    "\2\0\27\6\2\0\1\6\15\0\1\43\1\0\2\44"+
    "\22\0\6\44\40\0\1\43\1\0\2\45\22\0\6\44"+
    "\23\0\1\6\5\0\1\6\10\0\2\6\2\0\12\6"+
    "\1\46\2\6\2\0\27\6\2\0\2\6\5\0\1\6"+
    "\10\0\2\6\2\0\3\6\1\47\11\6\2\0\27\6"+
    "\2\0\2\6\5\0\1\6\10\0\2\6\2\0\10\6"+
    "\1\50\4\6\2\0\27\6\2\0\2\6\5\0\1\6"+
    "\10\0\2\6\2\0\1\51\14\6\2\0\27\6\2\0"+
    "\2\6\5\0\1\6\10\0\2\52\2\0\15\6\2\0"+
    "\1\6\6\52\20\6\2\0\2\6\5\0\1\6\10\0"+
    "\2\52\2\0\15\6\2\0\1\6\6\52\7\6\1\53"+
    "\1\6\1\54\6\6\2\0\2\6\5\0\1\6\10\0"+
    "\2\52\2\0\15\6\2\0\1\6\6\52\7\6\1\55"+
    "\10\6\2\0\2\6\5\0\1\6\10\0\2\6\2\0"+
    "\15\6\2\0\1\6\1\56\25\6\2\0\2\6\5\0"+
    "\1\6\10\0\2\6\2\0\15\6\2\0\1\6\1\57"+
    "\25\6\2\0\2\6\5\0\1\6\10\0\2\6\2\0"+
    "\15\6\2\0\13\6\1\60\2\6\1\61\10\6\2\0"+
    "\2\6\5\0\1\6\10\0\2\6\2\0\15\6\2\0"+
    "\16\6\1\62\10\6\2\0\2\6\5\0\1\6\10\0"+
    "\2\6\2\0\15\6\2\0\1\6\1\63\24\6\1\64"+
    "\2\0\2\6\5\0\1\6\10\0\2\6\2\0\15\6"+
    "\2\0\15\6\1\65\11\6\2\0\1\6\17\0\2\66"+
    "\52\0\1\66\17\0\2\67\22\0\6\67\40\0\1\43"+
    "\1\0\2\70\22\0\6\67\23\0\1\6\5\0\1\6"+
    "\10\0\2\6\2\0\6\6\1\71\6\6\2\0\27\6"+
    "\2\0\2\6\5\0\1\6\10\0\2\6\2\0\6\6"+
    "\1\72\6\6\2\0\27\6\2\0\2\6\5\0\1\6"+
    "\10\0\2\6\2\0\11\6\1\73\3\6\2\0\27\6"+
    "\2\0\2\6\5\0\1\6\10\0\2\6\2\0\10\6"+
    "\1\74\4\6\2\0\27\6\2\0\2\6\5\0\1\6"+
    "\10\0\2\75\2\0\15\6\2\0\1\6\6\75\20\6"+
    "\2\0\2\6\5\0\1\6\10\0\2\6\2\0\15\6"+
    "\2\0\1\6\1\76\23\6\1\77\1\6\2\0\2\6"+
    "\5\0\1\6\10\0\2\6\2\0\15\6\2\0\11\6"+
    "\1\100\15\6\2\0\2\6\5\0\1\6\10\0\2\6"+
    "\2\0\15\6\2\0\13\6\1\101\1\6\1\102\11\6"+
    "\2\0\2\6\5\0\1\6\10\0\2\6\2\0\15\6"+
    "\2\0\13\6\1\103\13\6\2\0\2\6\5\0\1\6"+
    "\10\0\2\6\2\0\15\6\2\0\14\6\1\104\12\6"+
    "\2\0\2\6\5\0\1\6\10\0\2\6\2\0\15\6"+
    "\2\0\1\6\1\105\25\6\2\0\2\6\5\0\1\6"+
    "\10\0\2\6\2\0\15\6\2\0\21\6\1\106\5\6"+
    "\2\0\2\6\5\0\1\6\10\0\2\6\2\0\15\6"+
    "\2\0\24\6\1\107\2\6\2\0\2\6\5\0\1\6"+
    "\10\0\2\6\2\0\15\6\2\0\20\6\1\110\6\6"+
    "\2\0\2\6\5\0\1\6\10\0\2\6\2\0\15\6"+
    "\2\0\17\6\1\111\7\6\2\0\2\6\5\0\1\6"+
    "\10\0\2\6\2\0\15\6\2\0\4\6\1\112\22\6"+
    "\2\0\1\6\17\0\2\113\22\0\6\113\40\0\1\43"+
    "\1\0\2\114\22\0\6\113\23\0\1\6\5\0\1\6"+
    "\10\0\2\6\2\0\2\6\1\115\12\6\2\0\27\6"+
    "\2\0\2\6\5\0\1\6\10\0\2\6\2\0\10\6"+
    "\1\116\4\6\2\0\27\6\2\0\2\6\5\0\1\6"+
    "\10\0\2\6\2\0\11\6\1\117\3\6\2\0\27\6"+
    "\2\0\2\6\5\0\1\6\10\0\2\6\2\0\10\6"+
    "\1\120\4\6\2\0\27\6\2\0\2\6\5\0\1\6"+
    "\10\0\2\121\2\0\15\6\2\0\1\6\6\121\20\6"+
    "\2\0\2\6\5\0\1\6\10\0\2\6\2\0\15\6"+
    "\2\0\20\6\1\122\6\6\2\0\2\6\5\0\1\6"+
    "\10\0\2\6\2\0\15\6\2\0\1\123\4\6\1\124"+
    "\21\6\2\0\2\6\5\0\1\6\10\0\2\6\2\0"+
    "\15\6\2\0\3\6\1\125\23\6\2\0\2\6\5\0"+
    "\1\6\10\0\2\6\2\0\15\6\2\0\21\6\1\126"+
    "\5\6\2\0\2\6\5\0\1\6\10\0\2\6\2\0"+
    "\15\6\2\0\6\6\1\127\20\6\2\0\2\6\5\0"+
    "\1\6\10\0\2\6\2\0\15\6\2\0\13\6\1\130"+
    "\13\6\2\0\2\6\5\0\1\6\10\0\2\6\2\0"+
    "\15\6\2\0\5\6\1\131\21\6\2\0\2\6\5\0"+
    "\1\6\10\0\2\6\2\0\15\6\2\0\26\6\1\132"+
    "\2\0\2\6\5\0\1\6\10\0\2\6\2\0\13\6"+
    "\1\133\1\134\2\0\27\6\2\0\2\6\5\0\1\6"+
    "\10\0\2\6\2\0\15\6\2\0\21\6\1\135\5\6"+
    "\2\0\2\6\5\0\1\6\10\0\2\6\2\0\15\6"+
    "\2\0\7\6\1\136\17\6\2\0\2\6\5\0\1\6"+
    "\10\0\2\6\2\0\15\6\2\0\5\6\1\137\21\6"+
    "\2\0\2\6\5\0\1\6\10\0\2\6\2\0\15\6"+
    "\2\0\5\6\1\140\21\6\2\0\1\6\17\0\2\141"+
    "\22\0\6\141\40\0\1\43\1\0\2\142\22\0\6\141"+
    "\23\0\1\6\5\0\1\6\10\0\2\6\2\0\7\6"+
    "\1\143\5\6\2\0\27\6\2\0\2\6\5\0\1\6"+
    "\10\0\2\6\2\0\12\6\1\144\2\6\2\0\27\6"+
    "\2\0\2\6\5\0\1\6\10\0\2\145\2\0\15\6"+
    "\2\0\1\6\6\145\20\6\2\0\2\6\5\0\1\6"+
    "\10\0\2\6\2\0\15\6\2\0\4\6\1\146\22\6"+
    "\2\0\2\6\5\0\1\6\10\0\2\6\2\0\15\6"+
    "\2\0\3\6\1\147\12\6\1\150\10\6\2\0\2\6"+
    "\5\0\1\6\10\0\2\6\2\0\15\6\2\0\21\6"+
    "\1\151\5\6\2\0\2\6\5\0\1\6\10\0\2\6"+
    "\2\0\15\6\2\0\12\6\1\152\14\6\2\0\2\6"+
    "\5\0\1\6\10\0\2\6\2\0\15\6\2\0\11\6"+
    "\1\153\15\6\2\0\2\6\5\0\1\6\10\0\2\6"+
    "\2\0\15\6\2\0\1\154\26\6\2\0\2\6\5\0"+
    "\1\6\10\0\2\6\2\0\15\6\2\0\5\6\1\155"+
    "\21\6\2\0\2\6\5\0\1\6\10\0\2\6\2\0"+
    "\15\6\2\0\5\6\1\156\21\6\2\0\2\6\5\0"+
    "\1\6\10\0\2\6\2\0\15\6\2\0\6\6\1\157"+
    "\20\6\2\0\1\6\17\0\2\160\22\0\6\160\40\0"+
    "\1\43\1\0\2\161\22\0\6\160\23\0\1\6\5\0"+
    "\1\6\10\0\2\162\2\0\15\6\2\0\1\6\6\162"+
    "\20\6\2\0\2\6\5\0\1\6\10\0\2\6\2\0"+
    "\15\6\2\0\16\6\1\163\10\6\2\0\2\6\5\0"+
    "\1\6\10\0\2\6\2\0\15\6\2\0\15\6\1\164"+
    "\11\6\2\0\2\6\5\0\1\6\10\0\2\6\2\0"+
    "\15\6\2\0\1\165\26\6\2\0\2\6\5\0\1\6"+
    "\10\0\2\6\2\0\15\6\2\0\7\6\1\166\17\6"+
    "\2\0\2\6\5\0\1\6\10\0\2\6\2\0\15\6"+
    "\2\0\3\6\1\167\23\6\2\0\2\6\5\0\1\6"+
    "\10\0\2\6\2\0\15\6\2\0\20\6\1\170\6\6"+
    "\2\0\2\6\5\0\1\6\10\0\2\6\2\0\15\6"+
    "\2\0\22\6\1\171\4\6\2\0\2\6\5\0\1\6"+
    "\10\0\2\6\2\0\15\6\2\0\11\6\1\172\15\6"+
    "\2\0\1\6\15\0\1\43\1\0\2\173\53\0\1\6"+
    "\5\0\1\6\10\0\2\6\2\0\15\6\2\0\13\6"+
    "\1\174\13\6\2\0\2\6\5\0\1\6\10\0\2\6"+
    "\2\0\15\6\2\0\1\175\26\6\2\0\2\6\5\0"+
    "\1\6\10\0\2\6\2\0\15\6\2\0\3\6\1\147"+
    "\23\6\2\0\2\6\5\0\1\6\10\0\2\6\2\0"+
    "\15\6\2\0\16\6\1\176\10\6\2\0\2\6\5\0"+
    "\1\6\10\0\2\6\2\0\15\6\2\0\1\177\26\6"+
    "\2\0\2\6\5\0\1\6\10\0\2\6\2\0\15\6"+
    "\2\0\1\200\26\6\2\0\2\6\5\0\1\6\10\0"+
    "\2\6\2\0\15\6\2\0\15\6\1\201\11\6\2\0"+
    "\2\6\5\0\1\6\10\0\2\6\2\0\15\6\2\0"+
    "\16\6\1\202\10\6\2\0\2\6\5\0\1\6\10\0"+
    "\2\6\2\0\15\6\2\0\22\6\1\203\4\6\2\0"+
    "\2\6\5\0\1\6\10\0\2\6\2\0\15\6\2\0"+
    "\13\6\1\204\13\6\2\0\2\6\5\0\1\6\10\0"+
    "\2\6\2\0\15\6\2\0\3\6\1\205\23\6\2\0"+
    "\2\6\5\0\1\6\10\0\2\6\2\0\15\6\2\0"+
    "\3\6\1\206\23\6\2\0\2\6\5\0\1\6\10\0"+
    "\2\6\2\0\15\6\2\0\5\6\1\207\21\6\2\0"+
    "\2\6\5\0\1\6\10\0\2\6\2\0\15\6\2\0"+
    "\20\6\1\210\6\6\2\0\2\6\5\0\1\6\10\0"+
    "\2\6\2\0\15\6\2\0\1\6\1\211\25\6\2\0"+
    "\2\6\5\0\1\6\10\0\2\6\2\0\15\6\2\0"+
    "\16\6\1\212\10\6\2\0\2\6\5\0\1\6\10\0"+
    "\2\6\2\0\15\6\2\0\16\6\1\213\10\6\2\0"+
    "\2\6\5\0\1\6\10\0\2\6\2\0\15\6\2\0"+
    "\16\6\1\214\10\6\2\0\2\6\5\0\1\6\10\0"+
    "\2\6\2\0\15\6\2\0\4\6\1\215\22\6\2\0"+
    "\2\6\5\0\1\6\10\0\2\6\2\0\15\6\2\0"+
    "\20\6\1\216\6\6\2\0\2\6\5\0\1\6\10\0"+
    "\2\6\2\0\15\6\2\0\20\6\1\217\6\6\2\0"+
    "\2\6\5\0\1\6\10\0\2\6\2\0\15\6\2\0"+
    "\13\6\1\220\13\6\2\0\2\6\5\0\1\6\10\0"+
    "\2\6\2\0\15\6\2\0\13\6\1\221\13\6\2\0"+
    "\2\6\5\0\1\6\10\0\2\6\2\0\15\6\2\0"+
    "\1\222\26\6\2\0\2\6\5\0\1\6\10\0\2\6"+
    "\2\0\15\6\2\0\7\6\1\223\17\6\2\0\2\6"+
    "\5\0\1\6\10\0\2\6\2\0\15\6\2\0\16\6"+
    "\1\224\10\6\2\0\2\6\5\0\1\6\10\0\2\6"+
    "\2\0\15\6\2\0\16\6\1\225\10\6\2\0\2\6"+
    "\5\0\1\6\10\0\2\6\2\0\15\6\2\0\3\6"+
    "\1\226\23\6\2\0\2\6\5\0\1\6\10\0\2\6"+
    "\2\0\15\6\2\0\5\6\1\227\21\6\2\0\2\6"+
    "\5\0\1\6\10\0\2\6\2\0\15\6\2\0\20\6"+
    "\1\230\6\6\2\0\2\6\5\0\1\6\10\0\2\6"+
    "\2\0\15\6\2\0\20\6\1\231\6\6\2\0\2\6"+
    "\5\0\1\6\10\0\2\6\2\0\15\6\2\0\16\6"+
    "\1\232\10\6\2\0\2\6\5\0\1\6\10\0\2\6"+
    "\2\0\15\6\2\0\22\6\1\233\4\6\2\0\2\6"+
    "\5\0\1\6\10\0\2\6\2\0\15\6\2\0\13\6"+
    "\1\234\13\6\2\0\2\6\5\0\1\6\10\0\2\6"+
    "\2\0\15\6\2\0\1\235\26\6\2\0\2\6\5\0"+
    "\1\6\10\0\2\6\2\0\15\6\2\0\16\6\1\236"+
    "\10\6\2\0\2\6\5\0\1\6\10\0\2\6\2\0"+
    "\15\6\2\0\3\6\1\237\23\6\2\0\2\6\5\0"+
    "\1\6\10\0\2\6\2\0\15\6\2\0\20\6\1\240"+
    "\6\6\2\0\2\6\5\0\1\6\10\0\2\6\2\0"+
    "\15\6\2\0\16\6\1\241\10\6\2\0\2\6\5\0"+
    "\1\6\10\0\2\6\2\0\15\6\2\0\13\6\1\242"+
    "\13\6\2\0\2\6\5\0\1\6\10\0\2\6\2\0"+
    "\15\6\2\0\16\6\1\243\10\6\2\0\2\6\5\0"+
    "\1\6\10\0\2\6\2\0\15\6\2\0\20\6\1\244"+
    "\6\6\2\0\1\6";

  private static int [] zzUnpacktrans() {
    int [] result = new int[7560];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\1\11\1\1\7\11\2\1\2\11"+
    "\4\1\2\11\11\1\2\11\2\0\22\1\1\0\23\1"+
    "\1\0\25\1\1\0\16\1\1\11\64\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol token(int type,String Value){
        return new Symbol(type, new Token(Value,yyline+1,yycolumn+1,type));
    }

    private Symbol token(int Type){
        return new Symbol(Type,new Token(yyline+1,yycolumn+1,Type));
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return token(EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("ERROR    " + yytext());
            }
          // fall through
          case 41: break;
          case 2:
            { /* ignore */
            }
          // fall through
          case 42: break;
          case 3:
            { return token(COMILLAS);
            }
          // fall through
          case 43: break;
          case 4:
            { return token(ID,yytext());
            }
          // fall through
          case 44: break;
          case 5:
            { return token(Parenth_O);
            }
          // fall through
          case 45: break;
          case 6:
            { return token(Parenth_C);
            }
          // fall through
          case 46: break;
          case 7:
            { return token(MULT);
            }
          // fall through
          case 47: break;
          case 8:
            { return token(PLUS);
            }
          // fall through
          case 48: break;
          case 9:
            { return token(COMMA);
            }
          // fall through
          case 49: break;
          case 10:
            { return token(MINUS);
            }
          // fall through
          case 50: break;
          case 11:
            { return token(DIV);
            }
          // fall through
          case 51: break;
          case 12:
            { return token(INT,yytext());
            }
          // fall through
          case 52: break;
          case 13:
            { return token(DPUNTOS);
            }
          // fall through
          case 53: break;
          case 14:
            { return token(P_COMMA);
            }
          // fall through
          case 54: break;
          case 15:
            { return token(Cor_O);
            }
          // fall through
          case 55: break;
          case 16:
            { return token(Cor_C);
            }
          // fall through
          case 56: break;
          case 17:
            { return token(Key_O);
            }
          // fall through
          case 57: break;
          case 18:
            { return token(Key_C);
            }
          // fall through
          case 58: break;
          case 19:
            { return token(DECIMAL,yytext());
            }
          // fall through
          case 59: break;
          case 20:
            { return token(CEIL);
            }
          // fall through
          case 60: break;
          case 21:
            { return token(HALL);
            }
          // fall through
          case 61: break;
          case 22:
            { return token(COLS);
            }
          // fall through
          case 62: break;
          case 23:
            { return token(NAME);
            }
          // fall through
          case 63: break;
          case 24:
            { return token(POSX);
            }
          // fall through
          case 64: break;
          case 25:
            { return token(POSY);
            }
          // fall through
          case 65: break;
          case 26:
            { return token(ROW);
            }
          // fall through
          case 66: break;
          case 27:
            { return token(TYPE);
            }
          // fall through
          case 67: break;
          case 28:
            { return token(BRICK);
            }
          // fall through
          case 68: break;
          case 29:
            { return token(FLOOR);
            }
          // fall through
          case 69: break;
          case 30:
            { return token(BOARD);
            }
          // fall through
          case 70: break;
          case 31:
            { return token(BOXES);
            }
          // fall through
          case 71: break;
          case 32:
            { return token(HEXA,yytext());
            }
          // fall through
          case 72: break;
          case 33:
            { return token(CONFIG);
            }
          // fall through
          case 73: break;
          case 34:
            { return token(PLAYER);
            }
          // fall through
          case 74: break;
          case 35:
            { return token(BCOLOR);
            }
          // fall through
          case 75: break;
          case 36:
            { return token(HCOLOR);
            }
          // fall through
          case 76: break;
          case 37:
            { return token(PCOLOR);
            }
          // fall through
          case 77: break;
          case 38:
            { return token(TCOLOR);
            }
          // fall through
          case 78: break;
          case 39:
            { return token(UCOLOR);
            }
          // fall through
          case 79: break;
          case 40:
            { return token(BOTCOLOR);
            }
          // fall through
          case 80: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
